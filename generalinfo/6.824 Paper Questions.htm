<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<!-- saved from url=(0046)http://pdos.csail.mit.edu/6.824/questions.html -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>
6.824 Spring 2012 Paper Questions
</title>

<!-- To add a new question, just put in within a <div> tag, give it
some identifier (i.e., 'ID="qXX"'), and then add it to the questions
array variable below.  To link directly to the question, just use a
link to 'questions.html?q=qXX'.
 -->

<script language="Javascript">
<!--
var questions = new Array( "qgo",
                           "qhypervisor",
			   "qfds",
			   "qpaxos",
			   "qharp",
			   "qspanner",
			   "qsundr",
			   "qivy",
			   "qtreadmarks",
			   "qficus",
			   "qbayou",
			   "qpnuts",
			   "qdynamo",
			   "qargus",
         "qplan9");

function init_questions() {
    var parts = new Array();
    parts = location.href.split('?');
    if( parts.length > 1 ) {
        var qparts = new Array();
	qparts = parts[1].split("=");
	for( var i = 0; i < questions.length; i++ ) {
	  if( qparts[1] != questions[i] ) {
	    document.getElementById(questions[i]).innerHTML = '';
	  }
	}
	document.getElementById("viewall").innerHTML = "<p><a href='questions.html'>View all questions</a>";
    }
}
-->
</script>

</head>

<body bgcolor="#ffffff" text="#00000" onload="javascript:init_questions();">

<div align="center">
<h2>
<a href="http://pdos.csail.mit.edu/6.824/index.html">6.824</a> Spring 2012 Paper Questions
</h2>
</div>

<a name="top"></a>
<p>
Please submit your answer for each day's paper question by the
beginning of
class: <a href="https://narula.scripts.mit.edu:444/6.824/handin.py">https://narula.scripts.mit.edu:444/6.824/handin.py</a>.

</p><p>You can also upload a file using curl:
</p><pre>$ curl -F file=@lec2.txt \
        -F key=XXXXXXXX \
        http://narula.scripts.mit.edu/6.824/upload</pre>
<p>

</p><div id="qgo">
<p>

<a href="http://tour.golang.org/">Go tour</a>:
what does this Go program print?

</p><pre>package main
import "fmt"
func f(x int) func() int {
  return func() int { x++; return x }
}
func main() {
  z := f(10)
  z()
  fmt.Printf("%v\n", z())
}
</pre>
</div>

<div id="qhypervisor">
<p>
<a href="http://pdos.csail.mit.edu/6.824/papers/bressoud-hypervisor.pdf">Hypervisor-based
  Fault-tolerance</a>
Suppose that instead of connecting both the primary and backup to the
same disk, we connected them to separate disks with identical copies
of the data? Would this work? What else might we have to worry about,
and what are some things that could go wrong?
</p></div>

<div id="qfds">
<p>
<a href="http://pdos.csail.mit.edu/6.824/papers/fds.pdf">Flat Datacenter Storage</a> TBD
</p></div>

<div id="qpaxos">
<p>
<a href="http://pdos.csail.mit.edu/6.824/papers/paxos-simple.pdf">Paxos Made Simple</a>
Suppose that the acceptors are <i>A</i>, <i>B</i>,
and <i>C</i>. <i>A</i> and <i>B</i> are also
proposers.
How does Paxos
ensure that the following sequence of events <u>can't</u> happen?
What actually happens, and which value is ultimately chosen?

</p><ol>
<li> <i>A</i> sends prepare requests with proposal number 1, and gets responses
  from <i>A</i>, <i>B</i>, and <i>C</i>.
</li><li> <i>A</i> sends <tt><nobr>accept(1, "foo")</nobr></tt>
  to <i>A</i> and <i>C</i> and gets responses from both.
  Because a majority accepted, <i>A</i> thinks
  that <tt>"foo"</tt> has been chosen.
  However, <i>A</i> crashes before sending an <tt>accept</tt> to <i>B</i>.
</li><li><i>B</i> sends prepare messages with proposal number 2, and gets responses
  from <i>B</i> and <i>C</i>.
</li><li><i>B</i> sends <tt><nobr>accept(2, "bar")</nobr></tt> messages
  to <i>B</i> and <i>C</i> and gets responses
  from both, so <i>B</i> thinks that <tt>"bar"</tt> has been chosen.
</li></ol>
</div>

<div id="qharp">
<p>
<a href="http://pdos.csail.mit.edu/6.824/papers/bliskov-harp.pdf">Replication in the Harp File System</a>
Figures 5-1, 5-2, and 5-3 show that Harp often finishes benchmarks
faster than a conventional non-replicated NFS server. This may be
surprising, since you might expect Harp to do strictly more work than a
conventional NFS server (for example, Harp must manage the replication).
Why is Harp often faster? Will all NFS operations be faster with Harp
than on a conventional NFS server, or just some of them? Which?
</p></div>

<div id="qspanner">
<p><a href="http://pdos.csail.mit.edu/6.824/papers/spanner.pdf">Spanner</a> TBD
</p></div>

<div id="qsundr">
<p>
<a href="http://pdos.csail.mit.edu/6.824/papers/li-sundr.pdf">Secure Untrusted Data Repository (SUNDR)</a>
In the simple straw-man, both fetch and modify operations are placed
in the log and signed. Suppose an alternate design that only signs and
logs modify operations. Does this allow a malicious server to break
fetch-modify consistency or fork consistency? Why or why not?
</p></div>

<div id="qivy">
<p>
<a href="http://pdos.csail.mit.edu/6.824/papers/li-dsm.pdf">Memory Coherence in Shared Virtual Systems</a>
<a href="http://pdos.csail.mit.edu/6.824/notes/ivy-code.txt">ivy-code.txt</a> is a version of
the code in Section 3.1 with some clarifications and bug fixes.
The write fault handler ends by sending a confirmation
to the manager, and the "Write server" code in the manager waits
for this confirmation. Suppose you eliminated this confirmation (both
the send and the wait) from the system. Describe a scenario in which
lack of the confirmation would cause the system to behave
incorrectly. You should assume that the network delivers all messages,
and that none of the computers fail.
</p></div>

<div id="qtreadmarks">
<p>
<a href="http://pdos.csail.mit.edu/6.824/papers/keleher-treadmarks.pdf">Distributed Shared Memory on
  Standard Workstations and Operating Systems</a>
Suppose that a simplified version of Treadmarks, called Dreadmarks,
simply sent all modifications of variables between an acquire and a
release to the next processor to acquire the same lock. No other
modifications are sent. What changes does Treadmarks send that
Dreadmarks does not?  Outline a specific simple situation in which
Treadmarks would provide more useful or intuitive memory behavior than
Dreadmarks.
</p></div>

<div id="qficus">
<p><a href="http://pdos.csail.mit.edu/6.824/papers/ficus.pdf">Ficus</a> TBD
</p></div>

<div id="qbayou">
<p>
<a href="http://pdos.csail.mit.edu/6.824/papers/bayou-conflicts.ps">Managing Update Conflicts in Bayou</a>
  Suppose we build a distributed filesystem using Bayou, and the
  system has a copy operation. Initially, file A contains "foo"
  and file B contains "bar". On one node, a user copies file A
  to file B, overwriting the old contents of B. On another node, a
  user copies file B to file A. After both operations are committed, we
  want both files to contain "foo" or for both files to contain
  "bar". Sketch a dependency check and merge procedure for the
  copy operation that makes this work. How does Bayou ensure that
  all the nodes agree about whether A and B contain "foo" or
  "bar"?
</p></div>

<div id="qpnuts">
<p>
<a href="http://pdos.csail.mit.edu/6.824/papers/cooper-pnuts.pdf">PNUTS: Yahoo!'s Hosted Data Serving Platform</a>
Briefly explain why it is (or isn't) okay to use relaxed consistency
for social applications (see Section 4). Does PNUTS handle the type of
problem presented by Example 1 in Section 1, and if so, how?
</p></div>

<div id="qdynamo">
<p><a href="http://pdos.csail.mit.edu/6.824/papers/dynamo.pdf">Dynamo</a> TBD
</p></div>

<div id="qargus">
<p>
<a href="http://pdos.csail.mit.edu/6.824/papers/liskov-argus.pdf">Guardians and Actions: Linguistic Support for Robust, Distributed Programs</a>
In Figure 4, <tt>read_mail</tt> deletes email from the mailbox.  If
new mail arrives just before the delete, will the email be deleted but
not returned?  Please briefly explain your answer.
</p></div>

<div id="qplan9">
<p>
<a href="http://pdos.csail.mit.edu/6.824/papers/plan9.pdf">Plan 9 from Bell Labs</a>
List three features introduced by Plan 9 that have not been adopted
by today's common operating systems.  For each, why do you think
the idea hasn't become popular?
</p></div>

<div id="viewall"></div>

<hr>
<p>Questions or comments regarding 6.824? Send e-mail to <a href="mailto:6.824-staff@pdos.csail.mit.edu"><i>6.824-staff@pdos.csail.mit.edu</i></a>.</p>

<p><b><a href="http://pdos.csail.mit.edu/6.824/questions.html#top">Top</a></b> //
<b><a href="http://pdos.csail.mit.edu/6.824/index.html">6.824 home</a></b> //</p>


</body></html>